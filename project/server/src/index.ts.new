import express from 'express';
import cors from 'cors';
import { createServer } from 'http';
import { Server } from 'socket.io';
import dotenv from 'dotenv';
import { initDatabase } from './database/db';
import authRoutes from './routes/auth.routes';
import fileRoutes from './routes/files.routes';
import syncRoutes from './routes/sync.routes';
import { setupSocketHandlers } from './services/socketService';
import path from 'path';

dotenv.config();

const app = express();
const httpServer = createServer(app);
const io = new Server(httpServer, {
  cors: {
    origin: process.env.CLIENT_URL || 'http://localhost:5173',
    methods: ['GET', 'POST', 'PUT', 'DELETE']
  }
});

app.use(cors());
app.use(express.json({ limit: '50mb' }));
app.use(express.urlencoded({ extended: true, limit: '50mb' }));

app.use('/uploads', express.static(path.join(__dirname, '../uploads')));

app.use('/api/auth', authRoutes);
app.use('/api/files', fileRoutes);
app.use('/api/sync', syncRoutes);

app.get('/api/health', (req, res) => {
  res.json({ status: 'ok', timestamp: new Date().toISOString(), uptime: process.uptime() });
});

initDatabase();
setupSocketHandlers(io);

const PORT = process.env.PORT || 5000;
httpServer.listen(Number(PORT), '0.0.0.0', () => {
  console.log(`
  ╔════════════════════════════════════════╗
  ║ 🚀 CADASTRE_IA Server Running          ║
  ║                                        ║
  ║ 📡 Local: http://localhost:${PORT}     ║
  ║ 📡 Network: http://192.168.1.154:${PORT} ║
  ║ 🔌 WebSocket: ws://192.168.1.154:${PORT} ║
  ║ 💾 Database: SQLite (local)            ║
  ║                                        ║
  ║ Ready for P2P synchronization!         ║
  ╚════════════════════════════════════════╝
  `);
});

export { io };
