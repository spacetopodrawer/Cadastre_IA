/**
 * Biblioth√®que de symboles pour la cartographie terrain
 * 
 * Cette biblioth√®que fournit des symboles pour les objets cartographiques courants,
 * avec prise en charge de plusieurs formats (Unicode, SVG, et r√©f√©rences d'ic√¥nes).
 * Elle est con√ßue pour fonctionner avec LLMAssistant.ts et OfflineMapRenderer.ts.
 */

type SymbolType = 'unicode' | 'svg' | 'icon';

interface SymbolDefinition {
  /** Type de symbole (unicode, svg, ou r√©f√©rence d'ic√¥ne) */
  type: SymbolType;
  /** Repr√©sentation du symbole (caract√®re Unicode, code SVG, ou nom d'ic√¥ne) */
  value: string;
  /** Cat√©gorie de l'objet pour le filtrage */
  category: string;
  /** Mots-cl√©s pour la recherche et la correspondance */
  keywords: string[];
  /** Description de l'objet */
  description: string;
  /** Auteur/contributeur du symbole */
  author?: string;
  /** Date d'ajout ou de derni√®re modification */
  lastUpdated?: Date;
  /** M√©tadonn√©es suppl√©mentaires */
  metadata?: Record<string, any>;
}

/**
 * Biblioth√®que principale de symboles
 * Cl√© : identifiant unique du symbole (en anglais, snake_case)
 * Valeur : d√©finition compl√®te du symbole
 */
export const symbolLibrary: Record<string, SymbolDefinition> = {
  // Infrastructure routi√®re
  bollard: {
    type: 'unicode',
    value: 'üü´',
    category: 'infrastructure',
    keywords: ['borne', 'bollard', 'poteau', 'bornage'],
    description: 'Borne ou poteau de signalisation',
    metadata: {
      height: 1.0,
      color: '#8B4513',
      isFixed: true
    }
  },
  
  // V√©g√©tation
  tree: {
    type: 'unicode',
    value: 'üå≥',
    category: 'vegetation',
    keywords: ['arbre', 'tree', 'v√©g√©tation', 'for√™t'],
    description: 'Arbre isol√© ou en groupe',
    metadata: {
      height: 5.0,
      isNatural: true
    }
  },
  
  // B√¢timents
  house: {
    type: 'unicode',
    value: 'üè†',
    category: 'building',
    keywords: ['maison', 'house', 'habitation', 'b√¢timent'],
    description: 'Habitation individuelle',
    metadata: {
      height: 6.0,
      isBuilding: true
    }
  },
  
  // Infrastructure
  road: {
    type: 'unicode',
    value: 'üõ£Ô∏è',
    category: 'infrastructure',
    keywords: ['route', 'road', 'chemin', 'voie'],
    description: 'Route ou voie de circulation',
    metadata: {
      isLinear: true,
      isNavigable: true
    }
  },
  
  // Points d'eau
  water_tap: {
    type: 'unicode',
    value: 'üö∞',
    category: 'water',
    keywords: ['point eau', 'borne incendie', 'fontaine', 'pompe'],
    description: 'Point d\'eau ou borne incendie',
    metadata: {
      isWaterSource: true,
      isEmergency: true
    }
  },
  
  // Autres cat√©gories...
  // ... (autres symboles de la liste originale)
};

/**
 * Trouve le symbole le plus appropri√© pour un texte donn√©
 * @param text Texte √† analyser pour la correspondance
 * @returns La d√©finition du symbole correspondant ou undefined si non trouv√©
 */
export function findMatchingSymbol(text: string): SymbolDefinition | undefined {
  if (!text) return undefined;
  
  const lowerText = text.toLowerCase();
  let bestMatch: { score: number; symbol: SymbolDefinition } | null = null;
  
  // Parcourir tous les symboles pour trouver la meilleure correspondance
  for (const [_, symbol] of Object.entries(symbolLibrary)) {
    // V√©rifier les mots-cl√©s
    const keywordScore = symbol.keywords.reduce((score, keyword) => {
      return score + (lowerText.includes(keyword.toLowerCase()) ? 1 : 0);
    }, 0);
    
    // V√©rifier la correspondance exacte avec la description
    const exactMatch = symbol.keywords.some(
      kw => kw.toLowerCase() === lowerText
    );
    
    const score = exactMatch ? 100 : keywordScore * 10;
    
    if (score > 0 && (!bestMatch || score > bestMatch.score)) {
      bestMatch = { score, symbol };
    }
  }
  
  return bestMatch?.symbol;
}

/**
 * Filtre les symboles par cat√©gorie
 * @param category Cat√©gorie de symboles √† r√©cup√©rer
 * @returns Objet contenant les symboles de la cat√©gorie demand√©e
 */
export function getSymbolsByCategory(category: string): Record<string, SymbolDefinition> {
  return Object.fromEntries(
    Object.entries(symbolLibrary).filter(([_, def]) => def.category === category)
  );
}

/**
 * Recherche des symboles correspondant √† une requ√™te
 * @param query Terme de recherche
 * @returns Tableau des d√©finitions de symboles correspondants
 */
export function searchSymbols(query: string): SymbolDefinition[] {
  if (!query) return [];
  
  const lowerQuery = query.toLowerCase();
  return Object.values(symbolLibrary).filter(symbol => {
    return (
      symbol.keywords.some(kw => kw.toLowerCase().includes(lowerQuery)) ||
      symbol.description.toLowerCase().includes(lowerQuery) ||
      symbol.category.toLowerCase().includes(lowerQuery)
    );
  });
}

/**
 * Convertit un symbole en repr√©sentation texte pour l'affichage
 * @param symbol D√©finition du symbole
 * @returns Repr√©sentation textuelle du symbole
 */
export function symbolToText(symbol: SymbolDefinition): string {
  switch (symbol.type) {
    case 'unicode':
      return symbol.value;
    case 'svg':
      return 'üìê';
    case 'icon':
      return 'üñºÔ∏è';
    default:
      return 'üìç';
  }
}

/**
 * Interface pour les cat√©gories de symboles
 */
export const symbolCategories = {
  infrastructure: 'Infrastructure',
  vegetation: 'V√©g√©tation',
  building: 'B√¢timents',
  water: 'Eau',
  landmark: 'Points de rep√®re',
  emergency: 'Urgence et s√©curit√©',
  transport: 'Transports',
  utility: 'Utilitaires'
} as const;

export type SymbolCategory = keyof typeof symbolCategories;

// Export des types
export type { SymbolDefinition };

// Pour le support HMR
if (import.meta.hot) {
  // @ts-ignore - Vite HMR
  import.meta.hot.accept(() => {
    console.log('Mise √† jour de la biblioth√®que de symboles');
  });
}
